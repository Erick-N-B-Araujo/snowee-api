<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="VM Devops" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="1" foreground="" ts_creation="1664196921" ts_lastsave="1664223917">
    <node name="Autenticação" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664196946" ts_lastsave="1664221048">
      <rich_text weight="heavy">Acesso remoto</rich_text>
      <rich_text>
IP: 10.222.2.119

</rich_text>
      <rich_text weight="heavy">Informações:</rich_text>
      <rich_text>
Nome: DSDEVOPSBR
User:adm.linkbr
password:#Pqls_1067

</rich_text>
      <rich_text weight="heavy">Acesso via SSH:</rich_text>
      <rich_text>
Para logar nessa maquina, é possivel atravez de acesso remoto por qualquer terminal SSH:
scp prod.pub prod-user@192.168.0.120:.ssh/authorized_keyss
ssh -i prod prod-user@192.168.0.120</rich_text>
    </node>
    <node name="Transferir arquivo" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664197176" ts_lastsave="1664197291">
      <rich_text weight="heavy">Transferir um arquivo para a VM:</rich_text>
      <rich_text>
scp arquivo_enviar.extensao user@ip:mapeamento_pasta_receber

</rich_text>
      <rich_text weight="heavy">Ex: </rich_text>
      <rich_text>scp vsts-agent-linux-x64-2.181.2.tar.gz adm.linkbr@10.222.2.119:/home/adm.linkbr/agent</rich_text>
    </node>
    <node name="CentOS7" unique_id="21" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221373" ts_lastsave="1664222795">
      <rich_text weight="heavy">Maquina Virtual</rich_text>
      <rich_text>

Coletando IP para configurar o Putty

</rich_text>
      <rich_text weight="heavy">Na maquina virtual:</rich_text>
      <rich_text> 
ip a

</rich_text>
      <rich_text weight="heavy">Mover pastas</rich_text>
      <rich_text>

mv origem destino

mv /home/jenkins/jenkins-data/pipeline/java-app/maven/AutomacaoPernambucanasSeleniumGrid   /home/jenkins/jenkins-data/pipeline/java-app</rich_text>
      <node name="Docker" unique_id="20" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221361" ts_lastsave="1664222724">
        <node name="Instalando" unique_id="22" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221476" ts_lastsave="1664221478">
          <rich_text>sudo yum install -y yum-utils

sudo yum-config-manager \
    --add-repo \
    </rich_text>
          <rich_text link="webs https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</rich_text>
          <rich_text>

sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin

sudo systemctl start docker

sudo docker run hello-world

sudo systemctl enable docker

sudo usermod -aG docker jenkins

sudo curl -L "</rich_text>
          <rich_text link="webs https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname</rich_text>
          <rich_text> -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker pull jenkins/jenkins:lts

docker info | grep -i root

sudo du -sh /var/lib/docker

mkdir jenkins

ls

pwd

mv jenkins/ jenkins-data

cd jenkins-data

mkdir jenkins_home

vi docker-compose.yml

cat docker-compose.yml

id

sudo chown 1000:1000 jenkins_home -R

docker-compose up -d

docker logs -f jenkins
</rich_text>
        </node>
        <node name="Criando uma imagem Jenkins/Docker" unique_id="23" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221535" ts_lastsave="1664221553">
          <rich_text>1- na raiz do projeto deve haver o arquivo docker-compose.yml

2- criar uma pasta, e dentro dela criar um arquivo Dockerfile

3- Apos editar os dois arquivos, rodar o comando na mesma pasta do docker-compose.yml:
docker-compose build

4- Verificar a criação da imagem:
docker images

5- Recriar a imagem atual, para utilizar a nova imagem:
docker-compose up -d

6- Para dar permissão de usuario para acessar o container:
sudo chown 1000:1000 /var/run/docker.sock

7- Para validar as permissões para o caminho:
ls -l /var/run/docker.sock

8- Para interagir com o terminal do container:
docker exec -ti jenkins bash</rich_text>
        </node>
        <node name="Usando imagem docker do Maven para buildar aplicações Java -jar" unique_id="24" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221589" ts_lastsave="1664221946">
          <rich_text>docker pull maven:3-alpine

</rich_text>
          <rich_text weight="heavy">crie uma pasta  para a aplicação:</rich_text>
          <rich_text>
java-app

ll -a

rm -rf .git

ll -a

docker run -ti  -v $PWD/java-app:/app maven:3-alpine sh

docker run --rm -ti -v $PWD/java-app:/app -v /root/.m2/:/root/.m2/ -w /app maven:3-alpine sh

docker run --rm -v $PWD/java-app:/app -v /root/.m2/:/root/.m2/ -w /app maven:3-alpine  mvn -B -DskipTests clean package

docker run --rm -ti -v $PWD/java-app:/app -v /root/.m2/:/root/.m2/ -w /app/AutomacaoPernambucanasSeleniumGrid maven:3-alpine sh

docker run --rm -v $PWD/java-app:/app -v /root/.m2/:/root/.m2/ -w /app maven:3-alpine  mvn -B -DskipTests clean package

</rich_text>
          <rich_text weight="heavy">criar uma pasta para os scripts de invocalçao do maven sh:</rich_text>
          <rich_text>
jenkins/build/mvn_invoker.sh

</rich_text>
          <rich_text weight="heavy">dê permissões de execução:</rich_text>
          <rich_text>
chmod +x mvn_invoker.sh

</rich_text>
          <rich_text weight="heavy">Verifica se foram dadas as permissões:</rich_text>
          <rich_text>
ll

</rich_text>
          <rich_text weight="heavy">Para solicitar ao jenkins para executar o script sem parametros:</rich_text>
          <rich_text>
./jenkins/build/mvn_invoker.sh 

</rich_text>
          <rich_text weight="heavy">Para solicitar ao jenkins para executar o script com parametros:</rich_text>
          <rich_text>
./jenkins/build/mvn_invoker.sh mvn -B -DskipTests clean package
</rich_text>
        </node>
        <node name="Criando uma imagem Docker para o aplicativo .Jar compilado" unique_id="25" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221653" ts_lastsave="1664221914">
          <rich_text weight="heavy">criar uma pasta para os scripts de build sh:</rich_text>
          <rich_text>
jenkins/build/Dockerfile-Java

</rich_text>
          <rich_text weight="heavy">copiar o .jar da aplicação para pasta atual:</rich_text>
          <rich_text>
cp ../../java-app/target/*.jar .

</rich_text>
          <rich_text weight="heavy">executar o comando para buildar a imagem da aplicação java:</rich_text>
          <rich_text>
docker build -f Dockerfile-Java -t test .

</rich_text>
          <rich_text weight="heavy">testar se a aplicação foi persistida dentro da nova imagem:</rich_text>
          <rich_text>
docker run --rm -ti test sh

</rich_text>
          <rich_text weight="heavy">entra no container e verificar execução da aplicação:</rich_text>
          <rich_text>
docker run -d test
docker run -d app:1

docker logs -f test
docker logs -f app:1
</rich_text>
        </node>
        <node name="Criando Docker-compose para automatizar a build da imagem .jar" unique_id="26" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221812" ts_lastsave="1664221896">
          <rich_text weight="heavy">criar uma pasta para os scripts de build sh:</rich_text>
          <rich_text>
jenkins/build/docker-compose-build.yml

export BUILD_TAG=1

docker-compose -f docker-compose-build.yml build

</rich_text>
          <rich_text weight="heavy">na pasta pipeline:</rich_text>
          <rich_text>
cp -f java-app/target/*.jar jenkins/build/

cd jenkins/build/ &amp;&amp; docker-compose -f docker-compose-build.yml build --no-cache

chmod +x jenkins/build/build_app_container_image.sh

./jenkins/build/build_app_container_image.sh

./jenkins/build/mvn_invoker.sh mvn test
</rich_text>
        </node>
        <node name="Docker HUB" unique_id="36" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222724" ts_lastsave="1664222759">
          <rich_text weight="heavy">Na maquina Jenkins:</rich_text>
          <rich_text>

docker login
eraraujolink

</rich_text>
          <rich_text weight="heavy">Para baixar a imagem do repositorio:</rich_text>
          <rich_text>
docker push eraraujolink/maven-project:tagname

</rich_text>
          <rich_text weight="heavy">Transferir a TAG da imagem gerada com o .JAR para a imagem do repositório:</rich_text>
          <rich_text>
docker tag app:2 eraraujolink/maven-project:2

</rich_text>
          <rich_text weight="heavy">Checkar se deu tudo certo:</rich_text>
          <rich_text>
docker images

</rich_text>
          <rich_text weight="heavy">Upar a imagem para o repositorio:</rich_text>
          <rich_text>
docker push eraraujolink/maven-project:2

</rich_text>
          <rich_text weight="heavy">Baixar a imagem do repositorio:</rich_text>
          <rich_text>
docker push eraraujolink/maven-project:2

</rich_text>
          <rich_text weight="heavy">Na pasta /pipeline/jenkins/push/:</rich_text>
          <rich_text>
crie e edite o arquivo push_docker_image.sh
vi push_docker_image.sh

export PASS=AdcOP1997

</rich_text>
          <rich_text weight="heavy">Para executar:</rich_text>
          <rich_text>
./push_docker_image.sh

./jenkins/push/push_docker_image.sh
</rich_text>
        </node>
      </node>
      <node name="Scripts" unique_id="29" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222163" ts_lastsave="1664223228">
        <node name="Criando script para automatizar os testes" unique_id="28" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221978" ts_lastsave="1664222168">
          <rich_text weight="heavy">criar uma pasta para os scripts de teste sh:</rich_text>
          <rich_text>
jenkins/test/mvn_test.sh

mkdir jenkins/test/

cd jenkins/test/

cp ../build/mvn_build.sh

mv mvn_build.sh mvn_test.sh

./jenkins/test/mvn_test.sh
</rich_text>
        </node>
        <node name="Criando script para automatizar a build da imagem" unique_id="27" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221871" ts_lastsave="1664222179">
          <rich_text weight="heavy">criar uma pasta para os scripts de build sh:</rich_text>
          <rich_text>
jenkins/build/build.sh
</rich_text>
        </node>
        <node name="Criando script de githook" unique_id="40" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223228" ts_lastsave="1664223233">
          <rich_text weight="heavy">Script PostReceive</rich_text>
          <rich_text>

#!/bin/bash

#Get branch name from ref head

if ! [ -t 0 ]; then
  read -a ref
fi

IFS='/' read -ra REF &lt;&lt;&lt; "${ref[2]}"
branch="${REF[2]}"

if ["$branch" == "master" ]; then
crumb=$(curl -u "eraraujolink:12345678" -s '</rich_text>
          <rich_text link="webs http://192.168.0.115:8080/crumbIs">http://192.168.0.115:8080/crumbIs</rich_text>
          <rich_text>
curl -u "eraraujolink:12345678" -H "$crumb" -X POST </rich_text>
          <rich_text link="webs http://192.168.0.115:8080">http://192.168.0.115:8080</rich_text>
          <rich_text>

  if [ $? -eq 0 ]; then
    echo "*OK*"
  else
    echo "*Error*"
  fi
fi</rich_text>
        </node>
      </node>
      <node name="Gitlab" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664203240" ts_lastsave="1664223262">
        <rich_text weight="heavy">Para verificar as configurações do projeto:</rich_text>
        <rich_text>

cat .git/config
</rich_text>
        <node name="Settando a maquina" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664211197" ts_lastsave="1664222304">
          <rich_text weight="heavy">Gerar a licensa SSH, no cmd:</rich_text>
          <rich_text>
ssh-keygen -t ed25519 -C "erick.araujo@linkconsulting.com.br"

</rich_text>
          <rich_text weight="heavy">Algo assim deve acontecer: </rich_text>
          <rich_text>
Generating public/private ed25519 key pair.
Enter file in which to save the key (C:\Users\erick.araujo/.ssh/id_ed25519):
Your identification has been saved in C:\Users\erick.araujo/.ssh/id_ed25519.
Your public key has been saved in C:\Users\erick.araujo/.ssh/id_ed25519.pub.
The key fingerprint is:
SHA256:gZO03GqISH9V17yNE3vajOLQ7BC/1OsMPgaOp27qszw erick.araujo@linkconsulting.com.br
The key's randomart image is:
+--[ED25519 256]--+
|      .  . .o    |
|     o =. .  +   |
| .    *.o     *  |
|.... ..o o   = o |
|. ....o S = . B  |
|    ..   + * + o |
|        o B.o .  |
|    .E o o.*o.   |
|    .=Boo ..oo   |
+----[SHA256]-----+

cat ~/.ssh/id_ed25519.pub | clip
type C:\Users\erick.araujo/.ssh/id_ed25519.pub | clip</rich_text>
        </node>
        <node name="Trocando a senha do servidor Gitlab local" unique_id="30" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222340" ts_lastsave="1664222348">
          <rich_text>docker exec -it gitlab-server gitlab-rake "gitlab:password:reset[root]"

user: root
pass: adminadmin

Baixar o repositorio localmente apos a subida do server
git clone </rich_text>
          <rich_text link="webs http://192.168.0.115:8090/jenkins-maven/AutomacaoPernabucanasSeleniumGRID.git">http://192.168.0.115:8090/jenkins-maven/AutomacaoPernabucanasSeleniumGRID.git</rich_text>
          <rich_text>

git clone </rich_text>
          <rich_text link="webs http://192.168.0.115:8090/jenkins-maven/idadedias.git">http://192.168.0.115:8090/jenkins-maven/idadedias.git</rich_text>
          <rich_text>
</rich_text>
        </node>
        <node name="Subindo o primeiro codigo" unique_id="31" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222389" ts_lastsave="1664223282">
          <rich_text weight="heavy">Para inserir o primeiro codigo para o Gitlab local</rich_text>
          <rich_text>

clonar um repositorio publico

criar e clonar um projeto do gitlab local

copiar os arquivos do projeto publico para o gitlab local:

cp -r ../java-app/* .

git add .

git status

git commit -m "Adds maven files"

git push origin master


----------------------------------------------------------------
Integração Jenkins - Gitlab

Enviando a pasta atual do projeto:

cd existing_folder
git init --initial-branch=main
git remote add origin </rich_text>
          <rich_text link="webs http://root:adminadmin@192.168.0.115:8090/jenkins/pipeline.git">http://root:adminadmin@192.168.0.115:8090/jenkins/pipeline.git</rich_text>
          <rich_text>
git add .
git commit -m "Initial commit"
git push -u origin main

git remote add origin </rich_text>
          <rich_text link="webs http://root:adminadmin@192.168.0.115:8090/jenkins/jenkins-setup.git">http://root:adminadmin@192.168.0.115:8090/jenkins/jenkins-setup.git</rich_text>
          <rich_text>
</rich_text>
        </node>
      </node>
      <node name="Rede" unique_id="32" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222446" ts_lastsave="1664222485">
        <node name="Controlar a rede do Linux" unique_id="33" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222464" ts_lastsave="1664222472">
          <rich_text>iproute2 - pacote substituto do net-tools

ip link show

ip addr show

ip link set rede_1 down

ip link set rede_1 up

ip -s link show rede_1

sudo ip addr add 192.168.0.119/24 dev rede_1

sudo ip addr del 192.168.0.119/24 dev rede_1

ip route show

sudo ip route add default via 192.168.1.100

sudo ifconfig enp0s3 192.168.0.119/24 netmask 255.255.255.0  broadcast 192.168.0.255
</rich_text>
        </node>
        <node name="Configurando Firewall IPTABLES" unique_id="34" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222485" ts_lastsave="1664222491">
          <rich_text>iptables -A INPUT -s 0/0 -i enp0s3 -d 192.168.0.119 -p TCP -j ACCEPT

iptables -A INPUT -p tcp --dport 22 -j ACCEPT

iptables -S


[Service]
Enviroment="HTTP_PROXY=</rich_text>
          <rich_text link="webs http://192.168.0.119:80/">http://192.168.0.119:80/</rich_text>
          <rich_text>"
Enviroment="HTTPS_PROXY=</rich_text>
          <rich_text link="webs http://192.168.0.119:80/">http://192.168.0.119:80/</rich_text>
          <rich_text>"
Enviroment="NO_PROXY=localhost,127.0.0.1/8,registry-1.docker.io/v2/"</rich_text>
        </node>
      </node>
      <node name="Usuarios" unique_id="35" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222618" ts_lastsave="1664222682">
        <rich_text weight="heavy">Definir o usuario inicial como Sudoers:</rich_text>
        <rich_text>
/etc/sudoers

incluir o usuario na lista abaixo do root com os mesmos parametros

</rich_text>
        <rich_text weight="heavy">Criar um novo usuario:</rich_text>
        <rich_text>

sudo useradd prod-user

</rich_text>
        <rich_text weight="heavy">Na maquina dos servidores Jenkins/Gitlab, gerar o acesso SSH publico:</rich_text>
        <rich_text>

ssh-keygen -f prod

cat prod.pub

</rich_text>
        <rich_text weight="heavy">Na maquina de PROD, utilizar o novo usuario:</rich_text>
        <rich_text>

sudo su
su prod-user
cd /home/prod-user/
mkdir .ssh
chmod 700 .ssh/
chmod 700 ~/.ssh
vi .ssh/authorized_keys
chmod 400 .ssh/autorized_keys
chmod 600 ~/.ssh/authorized_keys
exit

</rich_text>
        <rich_text weight="heavy">Na maquina dos servidores Jenkins/Gitlab, gerar o acesso SSH Privado:</rich_text>
        <rich_text>

cat prod.pub

</rich_text>
        <rich_text weight="heavy">Na maquina de PROD, criar um arquivo PROD com a chave ssh privada:</rich_text>
        <rich_text>

/home/prod-vm/prod
vi prod
sudo passwd prod-user
chmod 400 prod
ssh -i prod prod-user@192.168.0.120

</rich_text>
        <rich_text weight="heavy">Trocar senha de usuarios:</rich_text>
        <rich_text>

sudo passwd root</rich_text>
      </node>
      <node name="Deploy to Remote Machine" unique_id="37" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222795" ts_lastsave="1664223005">
        <rich_text weight="heavy">na Maquina Jenkins crie e edite:</rich_text>
        <rich_text>
/home/jenkins/jenkins-data/pipeline/jenkins/deploy/deploy_to_remote_machine.sh

./jenkins/deploy/deploy_to_remote_machine.sh

</rich_text>
        <rich_text weight="heavy">Na maquina remota:</rich_text>
        <rich_text>
sudo chmod 666 /var/run/docker.sock
sudo usermod -aG docker prod-user


</rich_text>
        <rich_text weight="heavy">Acessar a maquina remota:</rich_text>
        <rich_text>
ssh -i /opt/prod prod-user@192.168.0.120


</rich_text>
        <rich_text weight="heavy">Transferir um arquivo para uma maquina remota via SSH:</rich_text>
        <rich_text>
cd

scp -i /opt/prod /tmp/.auth  prod-user@192.168.0.120:/tmp/.auth

</rich_text>
        <rich_text weight="heavy">Escolher um novo lugar para a chave de acesso SSH:</rich_text>
        <rich_text>
cd

cp prod /opt

sudo chown 1000 /opt/prod
</rich_text>
        <node name="Deploy manual" unique_id="38" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664222902" ts_lastsave="1664222911">
          <rich_text>ssh -i /opt/prod prod-user@192.168.0.120

mkdir maven

cd maven/

vi docker-compose.yml

Coletar linha de informação em arquivo:
sed -n '1p' /tmp/.auth

export IMAGE=$(sed -n '1p' /tmp/.auth)
export TAG=$(sed -n '2p' /tmp/.auth)
export PASS=$(sed -n '3p' /tmp/.auth)

docker login -u eraraujolink -p $PASS

docker-compose up -d 
</rich_text>
        </node>
        <node name="Execução remota de script" unique_id="39" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223005" ts_lastsave="1664223019">
          <rich_text weight="heavy">publish_app.sh</rich_text>
          <rich_text>

#!/bin/bash

echo "Setting variables"

export IMAGE=$(sed -n '1p' /tmp/.auth)
export TAG=$(sed -n '2p' /tmp/.auth)
export PASS=$(sed -n '3p' /tmp/.auth)

echo "Loggin to Docker Hub"

docker login -u eraraujolink -p $PASS

echo "Deploying Application"

cd ~/maven &amp;&amp; docker-compose up -d

-----------------------------------------------
</rich_text>
          <rich_text weight="heavy">Executando script remotamente via SSH:</rich_text>
          <rich_text>

ssh -i /opt/prod prod-user@192.168.0.120 "/tmp/publish_app.sh"</rich_text>
        </node>
      </node>
    </node>
    <node name="Configurações" unique_id="47" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223917" ts_lastsave="1664224178">
      <rich_text weight="heavy">Iniciar variaveis de ambiente ao Iniciar Sessão</rich_text>
      <rich_text>

M2_HOME='/opt/apache-maven-3.6.3'
PATH="$M2_HOME/bin:$PATH"
export PATH

JAVA_HOME='/opt/jdk-13.0.1'
PATH="$JAVA_HOME/bin:$PATH"
export PATH

cd Downloads/git-*
sudo make configure
sudo ./configure --prefix=/usr/local
sudo make install
git --version

source /etc/profile.d/maven.sh</rich_text>
      <node name="Docker" unique_id="48" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223942" ts_lastsave="1664223983">
        <rich_text weight="heavy">Docker:</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Remover instalações anteriores:</rich_text>
        <rich_text>
sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine

</rich_text>
        <rich_text weight="heavy">Baixar o utilitario de configuração do repositorio:</rich_text>
        <rich_text>
sudo yum install -y yum-utils

</rich_text>
        <rich_text weight="heavy">Adicionar um novo repositorio:</rich_text>
        <rich_text>
sudo yum-config-manager \
    --add-repo \
    </rich_text>
        <rich_text link="webs https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Instalar o Docker:</rich_text>
        <rich_text>
 sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin

</rich_text>
        <rich_text weight="heavy">Iniciar o serviço do Docker:</rich_text>
        <rich_text>
sudo systemctl start docker

</rich_text>
        <rich_text weight="heavy">Testar se a instalação foi bem sucedida:</rich_text>
        <rich_text>
sudo docker run hello-world

</rich_text>
        <rich_text weight="heavy">Adicionar o usuario no docker-group:</rich_text>
        <rich_text>
sudo usermod -aG docker adm.linkbr

</rich_text>
        <rich_text weight="heavy">Adicionar permissões de execução:</rich_text>
        <rich_text>
sudo chmod 666 /var/run/docker.sock</rich_text>
      </node>
      <node name="Git-SCM" unique_id="49" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664224002" ts_lastsave="1664224020">
        <rich_text weight="heavy">Instalar o Git-SCM da fonte</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Bibliotecas necessarias:</rich_text>
        <rich_text>
sudo yum groupinstall "Development Tools"
sudo yum install gettext-devel openssl-devel perl-CPAN perl-devel zlib-devel

</rich_text>
        <rich_text weight="heavy">Incluir documentações:</rich_text>
        <rich_text>
sudo yum install asciidoc xmlto docbook2X getopt

</rich_text>
        <rich_text weight="heavy">Baixar o pacote:</rich_text>
        <rich_text>
sudo yum -y install </rich_text>
        <rich_text link="webs https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm">https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Depois de baixar o pacote:</rich_text>
        <rich_text>
sudo yum install git
git --version</rich_text>
      </node>
      <node name="JDK" unique_id="50" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664224035" ts_lastsave="1664224063">
        <rich_text weight="heavy">JDK
</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Baixar e extrair:</rich_text>
        <rich_text>
wget </rich_text>
        <rich_text link="webs https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz">https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-13.0.1_linux-x64_bin.tar.gz</rich_text>
        <rich_text>
tar -xvf openjdk-13.0.1_linux-x64_bin.tar.gz
sudo mv jdk-13.0.1 /opt/

wget </rich_text>
        <rich_text link="webs https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-1.8.0.342_linux-x64_bin.tar.gz">https://download.java.net/java/GA/jdk13.0.1/cec27d702aa74d5a8630c65ae61e4305/9/GPL/openjdk-1.8.0.342_linux-x64_bin.tar.gz</rich_text>
        <rich_text>

</rich_text>
        <rich_text weight="heavy">Na pasta HOME, criar arquivo ".profile":</rich_text>
        <rich_text>
JAVA_HOME='/opt/jdk-13.0.1'
PATH="$JAVA_HOME/bin:$PATH"
export PATH

/home/adm.linkbr/agent/_work/2/s

</rich_text>
        <rich_text weight="heavy">Executar o update:</rich_text>
        <rich_text>
source .profile

</rich_text>
        <rich_text weight="heavy">Escolher a versão java Default:</rich_text>
        <rich_text>
sudo alternatives --config java

</rich_text>
        <rich_text weight="heavy">Verificar a instalação do JDK:</rich_text>
        <rich_text>
java -version</rich_text>
      </node>
      <node name="Maven" unique_id="51" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664224099" ts_lastsave="1664224120">
        <rich_text weight="heavy">Maven
</rich_text>
        <rich_text>
</rich_text>
        <rich_text weight="heavy">Baixar e extrair:</rich_text>
        <rich_text>
wget </rich_text>
        <rich_text link="webs https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz">https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</rich_text>
        <rich_text>
tar -xvf apache-maven-3.6.3-bin.tar.gz
sudo mv apache-maven-3.6.3 /opt/

</rich_text>
        <rich_text weight="heavy">Na pasta HOME, criar arquivo ".profile":</rich_text>
        <rich_text>
M2_HOME='/opt/apache-maven-3.6.3'
PATH="$M2_HOME/bin:$PATH"
export PATH

</rich_text>
        <rich_text weight="heavy">Executar o update:</rich_text>
        <rich_text>
source .profile

</rich_text>
        <rich_text weight="heavy">Verificar a instalação do Maven:</rich_text>
        <rich_text>
mvn -version</rich_text>
      </node>
    </node>
  </node>
  <node name="Certificações" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664198282" ts_lastsave="1664198388">
    <rich_text>Certificações para Tirar:

-CTFL
</rich_text>
  </node>
  <node name="Cucumber" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664198388" ts_lastsave="1664223437">
    <node name="Dicas" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664198410" ts_lastsave="1664198565">
      <rich_text weight="heavy">Dicas de Cucumber</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">1-</rich_text>
      <rich_text> Para receber algum parâmetro especifico da frase de BDD, usar "{word}" para definir a parte da frase que deseja coletar. 
</rich_text>
      <rich_text weight="heavy">Ex: </rich_text>
      <rich_text>"Eu faço um POST para /v3/user com os valores: " /////
@Quando("eu faço um POST para {word} com os seguintes valores: ")

</rich_text>
      <rich_text weight="heavy">2-</rich_text>
      <rich_text> Para receber um mapa de dados, utilizar o Map&lt;String, String&gt; user, passando a chave e o valor. 
</rich_text>
      <rich_text weight="heavy">Ex:</rich_text>
      <rich_text> E na frase BDD escrever em forma de tabela: | id | 10 |

</rich_text>
      <rich_text weight="heavy">3-</rich_text>
      <rich_text> Para popular, é utilizado a função "given().contentType(ContentType.JSON).body(user).when().post("</rich_text>
      <rich_text link="webs http://localhost:12345/api">http://localhost:12345/api</rich_text>
      <rich_text>" + endpoint).then().contentType(ContentType.JSON).statusCode(HttpStatus.SC_OK);</rich_text>
    </node>
  </node>
  <node name="Azure Devops" unique_id="41" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223437" ts_lastsave="1664223759">
    <node name="Test Plan" unique_id="42" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223452" ts_lastsave="1664223508">
      <rich_text weight="heavy">Rodar o teste automatizado vinculado ao TestCase em um Test Plan</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Pré-requisitos:</rich_text>
      <rich_text>
-Codigo fonte escrito em C#/.NET
-Classes de testes: devopswebapp.Tests
-Arquivo de configuração dos testes:  test.runsettings
-Artefato da aplicação
-Visual Studio ****

</rich_text>
      <rich_text weight="heavy">Para vincular os testes automatizados ao casos de teste do Azure Test Plan, é necessario que você:</rich_text>
      <rich_text>

- Crie um plano de testes no Azure Test Plan, e crie o Test Case;
- Execute os testes localmente via Visual Studio Test Explorer;
- Clicar sobre a execução do teste com o botão direito;
- Escolher "Vincular ao caso de teste";
- Escolher o Test case.

</rich_text>
      <rich_text weight="heavy">Para executar os testes automatizados e coletar o resultado da execução para os Test Cases, é necessario que a aplicação tenha concluido a esteira de CI:
</rich_text>
      <rich_text>
- Em Releases: Edite o pipeline;
Artifacts
- App.zip
- test.runsettings
Tasks
- Adicione "Visual Studio Test Platform Installer";
- Adicione "VsTest - testPlan", com as configurações:{
    - Select tests using: Test Plan
    - Test platform version: Installed by Tools Installer
    - Settings file: $(System.DefaultWorkingDirectory)/runSettings/dotnet-app/test.runsettings
}
</rich_text>
    </node>
    <node name="Nuget" unique_id="43" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223543" ts_lastsave="1664223698">
      <rich_text>Nuget.exe CLI

Criar um pacote
./nuget.exe pack devopswebapp.csproj

./nuget.exe push devopswebapp.csproj
</rich_text>
      <node name="Artefatos" unique_id="45" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223698" ts_lastsave="1664223735">
        <rich_text weight="heavy">Gerar o pacote Nuget:</rich_text>
        <rich_text>
dotnet pack

</rich_text>
        <rich_text weight="heavy">api-key:</rich_text>
        <rich_text> oy2bji63sj3oniqw2d4aj5qzfm7zqulubkqmtd36j4zuyy

</rich_text>
        <rich_text weight="heavy">Enviar o pacote para o Devops Artifacts:</rich_text>
        <rich_text>
Deve estar logado na VPN

dotnet nuget push 'C:\Users\erick.araujo\DevOpsAzure\devopswebapp\bin\Debug\devopswebapp.1.0.0.nupkg' --source "SandboxArtifacts" --api-key jogl2gojjsrzy2nsjmrwcx4kpsxbpv2ut6yh2d3z7uuce2uk2hma
</rich_text>
      </node>
    </node>
    <node name="Agent" unique_id="46" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223759" ts_lastsave="1664223777">
      <rich_text weight="heavy">Configurando Agente
</rich_text>
      <rich_text>
PS C:\&gt; mkdir agent ; cd agent
PS C:\agent&gt; Add-Type -AssemblyName System.IO.Compression.FileSystem ; [System.IO.Compression.ZipFile]::ExtractToDirectory("$HOME\Downloads\vsts-agent-win-x64-2.181.2.zip", "$PWD")

PS C:\agent&gt; .\config.cmd

PS C:\agent&gt; .\run.cmd
</rich_text>
    </node>
  </node>
  <node name="Maven" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664199238" ts_lastsave="1664221187">
    <node name="CLI" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664199244" ts_lastsave="1664220190">
      <rich_text weight="heavy">Maven CLI</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Verificar Versão:</rich_text>
      <rich_text>
mvn --version

</rich_text>
      <rich_text weight="heavy">Criar projeto de QuickStart:</rich_text>
      <rich_text>
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false

</rich_text>
      <rich_text weight="heavy">Estrutura que o Maven compila:</rich_text>
      <rich_text>
my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java


</rich_text>
      <rich_text weight="heavy">Maven - POM.xml:</rich_text>
      <rich_text> gerencia as dependencias

</rich_text>
      <rich_text weight="heavy">Buildar projeto:</rich_text>
      <rich_text>
mvn package

</rich_text>
      <rich_text weight="heavy">Testar a complicação do projeto:</rich_text>
      <rich_text>
java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App

</rich_text>
      <rich_text weight="heavy">Ferramentas de ciclo de vida de projeto do Maven:</rich_text>
      <rich_text>{
    </rich_text>
      <rich_text weight="heavy">validate:</rich_text>
      <rich_text> validate the project is correct and all necessary information is available
    </rich_text>
      <rich_text weight="heavy">compile:</rich_text>
      <rich_text> compile the source code of the project
    </rich_text>
      <rich_text weight="heavy">test:</rich_text>
      <rich_text> test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
    </rich_text>
      <rich_text weight="heavy">package:</rich_text>
      <rich_text> take the compiled code and package it in its distributable format, such as a JAR.
    </rich_text>
      <rich_text weight="heavy">integration-test:</rich_text>
      <rich_text> process and deploy the package if necessary into an environment where integration tests can be run
    </rich_text>
      <rich_text weight="heavy">verify:</rich_text>
      <rich_text> run any checks to verify the package is valid and meets quality criteria
    </rich_text>
      <rich_text weight="heavy">install:</rich_text>
      <rich_text> install the package into the local repository, for use as a dependency in other projects locally
    </rich_text>
      <rich_text weight="heavy">deploy:</rich_text>
      <rich_text> done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.}

</rich_text>
      <rich_text weight="heavy">Ferramentas fora do ciclo de vida de projeto do Maven:</rich_text>
      <rich_text>{
    </rich_text>
      <rich_text weight="heavy">clean:</rich_text>
      <rich_text> cleans up artifacts created by prior builds
    </rich_text>
      <rich_text weight="heavy">site:</rich_text>
      <rich_text> generates site documentation for this project}

</rich_text>
      <rich_text weight="heavy">Maven aceita comandos sequenciais:</rich_text>
      <rich_text>
</rich_text>
      <rich_text weight="heavy">Ex:</rich_text>
      <rich_text> Limpar o projeto(pasta TARGET), copiar dependencias e buildar o projeto:
mvn clean dependency:copy-dependencies package

</rich_text>
      <rich_text weight="heavy">Gerar documentação automatica:</rich_text>
      <rich_text>
mvn site

</rich_text>
      <rich_text weight="heavy">Pular ciclo de teste:</rich_text>
      <rich_text>
mvn -Dmaven.test.skip=true

</rich_text>
      <rich_text weight="heavy">Testes Automatizados</rich_text>
      <rich_text>:
mvn test -Dsurefire.suiteXmlFiles=GRID.xml
mvn clean test</rich_text>
    </node>
    <node name="POM.XML" unique_id="18" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221187" ts_lastsave="1664223581">
      <node name="Mapeando a Main Class" unique_id="19" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664221209" ts_lastsave="1664221257">
        <rich_text>&lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.4&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;archive&gt;
                        &lt;manifest&gt;
                            &lt;addClasspath&gt;true&lt;/addClasspath&gt;
                            &lt;mainClass&gt;IdadeDias&lt;/mainClass&gt;
                        &lt;/manifest&gt;
                    &lt;/archive&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;commons-lang&lt;/groupId&gt;
            &lt;artifactId&gt;commons-lang&lt;/artifactId&gt;
            &lt;version&gt;2.1&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.codehaus.plexus&lt;/groupId&gt;
            &lt;artifactId&gt;plexus-utils&lt;/artifactId&gt;
            &lt;version&gt;1.1&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;</rich_text>
      </node>
      <node name="SonaQube" unique_id="44" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664223581" ts_lastsave="1664223593">
        <rich_text>SonaQUBE - Java

Pré-requisitos:
JKD 11+
Adicionar as dependencias no pom.xml:

&lt;repositories&gt;
        &lt;repository&gt;
            &lt;id&gt;BBSandboxMaven&lt;/id&gt;
            &lt;url&gt;</rich_text>
        <rich_text link="webs https://devops.aitec.pt/AzureDevOps2020/b8135185-b405-4ff4-b18f-c179dc46a27a/_packaging/BBSandboxMaven/maven/v1">https://devops.aitec.pt/AzureDevOps2020/b8135185-b405-4ff4-b18f-c179dc46a27a/_packaging/BBSandboxMaven/maven/v1</rich_text>
        <rich_text>&lt;/url&gt;
            &lt;releases&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/releases&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/repositories&gt;
    &lt;distributionManagement&gt;
        &lt;repository&gt;
            &lt;id&gt;BBSandboxMaven&lt;/id&gt;
            &lt;url&gt;</rich_text>
        <rich_text link="webs https://devops.aitec.pt/AzureDevOps2020/b8135185-b405-4ff4-b18f-c179dc46a27a/_packaging/BBSandboxMaven/maven/v1">https://devops.aitec.pt/AzureDevOps2020/b8135185-b405-4ff4-b18f-c179dc46a27a/_packaging/BBSandboxMaven/maven/v1</rich_text>
        <rich_text>&lt;/url&gt;
            &lt;releases&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/releases&gt;
            &lt;snapshots&gt;
                &lt;enabled&gt;true&lt;/enabled&gt;
            &lt;/snapshots&gt;
        &lt;/repository&gt;
    &lt;/distributionManagement&gt;</rich_text>
      </node>
    </node>
  </node>
  <node name="Selenium" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664215144" ts_lastsave="1664216655">
    <node name="Grid" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664215161" ts_lastsave="1664215254">
      <rich_text weight="heavy">Criar Hub e Node - Selenium Grid</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">1º Baixar o .jar do Selenium Server;</rich_text>
      <rich_text>
</rich_text>
      <rich_text weight="heavy">2º Para gerar o Hub, no cmd: </rich_text>
      <rich_text> java -jar selenium-server-standalone-3.141.59.jar -role hub
</rich_text>
      <rich_text weight="heavy">3º Para registrar o node no Hub, no cmd:</rich_text>
      <rich_text>  java -jar selenium-server-standalone-3.141.59.jar -role node -hub </rich_text>
      <rich_text link="webs http://192.168.0.121:4444/grid/register">http://192.168.0.121:4444/grid/register</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Registrar node com Firefox:</rich_text>
      <rich_text>
java -Dwebdriver.gecko.driver=C:/Selenium/geckodriver.exe -jar selenium-server-standalone-3.141.59.jar -role node -hub </rich_text>
      <rich_text link="webs http://192.168.0.121:4444/grid/register">http://192.168.0.121:4444/grid/register</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Registrar node com Chrome:</rich_text>
      <rich_text>
java -Dwebdriver.chrome.driver=C:/Selenium/chromedriver.exe -jar selenium-server-standalone-3.141.59.jar -role node -hub </rich_text>
      <rich_text link="webs http://192.168.0.121:4444/grid/register">http://192.168.0.121:4444/grid/register</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">4º Acessos:</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs http://192.168.0.121:4444/grid/console">http://192.168.0.121:4444/grid/console</rich_text>
      <rich_text>
</rich_text>
      <rich_text link="webs http://localhost:4444/grid/console">http://localhost:4444/grid/console</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Obs:</rich_text>
      <rich_text>

java -jar selenium-server-4.0.0.jar standalone

java -jar selenium-server-4.0.0.jar standalone

sobrecarregar grid - +8 +&gt; Gera fila, e distribui para a proxima thread disponivel 

Criar node indepedente para cada teste, e definir qual irá ser executado em qual node.

Standalone não gerencia os nodes, ele cria 1, e executa varios navegadores no mesmo node.

O Selenium HUB não executa teste, mas sim os nodes.

Com testes WEB, o desempenho da maquina e a internet podem causar a falha dos testes, pois em conexão lenta, os timeouts dos testes estouram.</rich_text>
    </node>
  </node>
  <node name="Docker" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664216655" ts_lastsave="1664218342">
    <node name="Hands On" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664216950" ts_lastsave="1664220449">
      <rich_text weight="heavy">Docker - </rich_text>
      <rich_text>Exemplo

Composto por dois arquivos: DockerFile.docker e docker-composer.yml
</rich_text>
      <rich_text weight="heavy">EX:</rich_text>
      <rich_text>

-DockerFile.docker: 
FROM jenkins/jenkins

USER root

-docker-composer.yml:

version: '3'
services:
 
 jenkins:
  container_name: jenkins
  build:
   context: .
  ports:
   -"8080:8080"
  volumes:
   - ./docker/jenkins:var/jenkins_home

</rich_text>
    </node>
    <node name="CLI" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664217716" ts_lastsave="1664220867">
      <rich_text weight="heavy">Comandos Docker:</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Inicia o docker:</rich_text>
      <rich_text> 
docker-compose up -d

</rich_text>
      <rich_text weight="heavy">Fecha o docker:</rich_text>
      <rich_text>  
docker-compose down

</rich_text>
      <rich_text weight="heavy">Lista as imagens docker:</rich_text>
      <rich_text>  
docker-compose ps

</rich_text>
      <rich_text weight="heavy">Coleta InitialAdminPassword:</rich_text>
      <rich_text>  
cat docker/jenkins/secrets/initialAdminPassword

</rich_text>
      <rich_text weight="heavy">Listar as imagens docker baixadas:</rich_text>
      <rich_text>
docker image ls

</rich_text>
      <rich_text weight="heavy">Remover imagem docker:</rich_text>
      <rich_text>
docker rmi &lt;id&gt;

</rich_text>
      <rich_text weight="heavy">Remover container docker:</rich_text>
      <rich_text>
docker rm &lt;Nome&gt;

</rich_text>
      <rich_text weight="heavy">Parar container docker:</rich_text>
      <rich_text>
docker stop &lt;Nome&gt;

</rich_text>
      <rich_text weight="heavy">Pegar uma imagem do Docker Hub:</rich_text>
      <rich_text>
docker pull selenium/standalone-firefox

</rich_text>
      <rich_text weight="heavy">Listar containers instalados:</rich_text>
      <rich_text>
docker ps -a

</rich_text>
      <rich_text weight="heavy">Listar containers ativos:</rich_text>
      <rich_text>
docker ps

</rich_text>
      <rich_text weight="heavy">Instanciar um container com anotações:</rich_text>
      <rich_text>
docker run -d -p 4444:4444 -p 7900:7900 --shm-size="2g" --name PernambucanasDocker selenium/standalone-firefox
Id: d386f19a2aea797d4cbba6b0832bf0b04352c29239b082215154787711456f26

</rich_text>
      <rich_text weight="heavy">Onde:</rich_text>
      <rich_text>
-d: habilita execução "headless" e oculta os logs do console.
-p: habilita uma porta para o container
shm-size="2g": quantidade de memoria que o container utilizará

</rich_text>
      <rich_text weight="heavy">localhost:7900 - NoVNC:</rich_text>
      <rich_text> 
para vizualizar a execução dos testes no container

</rich_text>
      <rich_text weight="heavy">Para executar o container no modo interativo(digitação):</rich_text>
      <rich_text>
docker run -i &lt;Nome&gt;

</rich_text>
      <rich_text weight="heavy">Para executar o container no modo interativo(vizualização e digitação):</rich_text>
      <rich_text>
docker run -it &lt;Nome&gt;

</rich_text>
      <rich_text weight="heavy">Para inspecionar um container:</rich_text>
      <rich_text>
docker inspect &lt;Nome&gt;</rich_text>
    </node>
  </node>
  <node name="Jenkins" unique_id="16" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664218342" ts_lastsave="1664223519">
    <node name="Hands On" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" nosearch_me="0" nosearch_ch="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1664219847" ts_lastsave="1664221116">
      <rich_text weight="heavy">Configurando o Jenkins:</rich_text>
      <rich_text>

</rich_text>
      <rich_text weight="heavy">Acessar: </rich_text>
      <rich_text link="webs http://localhost:8080">http://localhost:8080</rich_text>
      <rich_text>
Digitar a senha indicada.
Install ALL Sugested!

</rich_text>
      <rich_text weight="heavy">Ex: JenkinsFile</rich_text>
      <rich_text>

pipeline{
-agent none
-stages{
--stage('Build'){
---agent{
----docker{image 'maven'}
---{
---steps{
---sh "mvn package -Dmaven.test.skip=true"
---{
--}
-}
}

</rich_text>
      <rich_text weight="heavy">Jenkins PIPELINE</rich_text>
      <rich_text>

/home/jenkins/idadedias/pipeline/java-app

docker run --rm -v /home/jenkins/idadedias/pipeline/java-app:/app -v /root/.m2/:/root/.m2/ -w /app/ maven:3-alpine mvn -B -DskipTests clean package

docker run --rm -ti -v $PWD/pipeline/java-app:/app -v /root/.m2/:/root/.m2/ -w /app/ maven:3-alpine bash</rich_text>
    </node>
  </node>
</cherrytree>
